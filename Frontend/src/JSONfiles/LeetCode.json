[
    {
        "title": "027 - Remove Elements",
        "description": "The Problem requires the user to create a function that returns the number of elements in the given array which are not equal to the given value. Our approach should use in-place algorithms to solve the problem. For this problem I’m using Typescript as the chosen language. The only reason for this decision is due to the fact that I am currently learning the MERN Stack. ",
        "Solution": "For my solution, I have chosen to use the splice. My only issue with splice is that this function returns a copy of the array that excludes the element we are removing, when coupled with a for loop. This can cause the function to skip certain elements in the array due to removing an element from the array causing the next element to be passed over since it replaces the old position in array while the for loop increments. Within my final solution, I iterate through the array using a for loop to find any value that is the same to the given number. When it find a match, we using splice to remove a singular number located at the same location as the iteration number, i. To bypass the above issue, we decrement the for loop counter to then double check the same spot twice only if the element is removed.",
        "Research": "In-place Algorithms - A type of algorithm that does not require additional space for their operations. In layman’s terms, it aims to output the operation by for example, editing the array instead of creating another one for output. I have learnt about all the methods to remove elements from an array in typescript; pop, shift, splice, filter. ",
        "language": "typescript",
        "code": "function removeElement(nums: number[], val: number): number {\nlet n = nums.length; \n for (let i = 0; i < n; i++) \n {if (nums[i] === val) \n {nums.splice(i, 1);i--;}} \nreturn nums.length;};"
    }
]
